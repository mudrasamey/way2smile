{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/Panel.tsx","../src/components/PanelContent.tsx"],"names":["addons","types","ADDON_ID","PANEL_ID","PARAM_KEY","EVENTS","React","useAddonState","useChannel","useParameter","AddonPanel","SyntaxHighlighter","PanelContent","code","showLineNumbers","wrapLines","Panel","props","setState","state","parameters","viewMode"],"mappings":"AAAA,OAAS,UAAAA,EAAQ,SAAAC,MAAa,iCCAvB,IAAMC,EAAW,iBACXC,EAAW,GAAGD,CAAQ,SACtBE,EAAY,OAEZC,EAAS,CACpB,YAAa,GAAGH,CAAQ,aAC1B,ECNA,OAAOI,MAAW,QAClB,OACE,iBAAAC,EACA,cAAAC,EACA,gBAAAC,MACK,iCACP,OAAS,cAAAC,MAAkB,gCCN3B,OAAOJ,MAAW,QAClB,OAAS,qBAAAK,MAAyB,gCAQ3B,IAAMC,EAA4C,CAAC,CACxD,KAAAC,EACA,gBAAAC,EAAkB,GAClB,UAAAC,EAAY,EACd,IACET,EAAA,cAACK,EAAA,CACC,SAAU,OACV,SAAU,GACV,OAAQ,GACR,gBAAiBG,EACjB,cAAeC,EACf,OAAQ,QAEPF,CACH,EDTK,IAAMG,EAA+BC,GAAU,CAEpD,GAAM,CAAC,CAAE,KAAAJ,CAAK,EAAGK,CAAQ,EAAIX,EAAcL,EAAU,CACnD,KAAM,IACR,CAAC,EAGDM,EAAW,CACT,CAACH,EAAO,WAAW,EAAG,CAAC,CAAE,KAAAQ,CAAK,IAAM,CAClCK,EAAUC,IAAW,CAAE,GAAGA,EAAO,KAAAN,CAAK,EAAE,CAC1C,CACF,CAAC,EAED,IAAMO,EAAaX,EAAaL,EAAW,CACzC,YAAa,CAAE,gBAAiB,GAAO,UAAW,EAAK,CACzD,CAAC,EACK,CACJ,YAAa,CAAE,gBAAAU,EAAkB,GAAO,UAAAC,EAAY,EAAK,EAAI,CAAC,CAChE,EAAIK,EAEJ,OACEd,EAAA,cAACI,EAAA,CAAY,GAAGO,GACdX,EAAA,cAACM,EAAA,CACC,KAAMC,EACN,gBAAiBC,EACjB,UAAWC,EACb,CACF,CAEJ,EFtCAf,EAAO,SAASE,EAAU,IAAM,CAE9BF,EAAO,IAAIG,EAAU,CACnB,KAAMF,EAAM,MACZ,MAAO,OACP,MAAO,CAAC,CAAE,SAAAoB,CAAS,IAAMA,IAAa,QACtC,OAAQL,EACR,SAAUZ,CACZ,CAAC,CACH,CAAC","sourcesContent":["import { addons, types } from \"storybook/internal/manager-api\";\nimport { ADDON_ID, PANEL_ID, PARAM_KEY } from \"./constants\";\nimport { Panel } from \"./Panel\";\n\n// Register the addon\naddons.register(ADDON_ID, () => {\n  // Register the panel\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: \"HTML\",\n    match: ({ viewMode }) => viewMode === \"story\",\n    render: Panel,\n    paramKey: PARAM_KEY,\n  });\n});\n","export const ADDON_ID = \"storybook/html\";\nexport const PANEL_ID = `${ADDON_ID}/panel`;\nexport const PARAM_KEY = `html`;\n\nexport const EVENTS = {\n  CODE_UPDATE: `${ADDON_ID}/codeUpdate`,\n};\n","import React from \"react\";\nimport {\n  useAddonState,\n  useChannel,\n  useParameter,\n} from \"storybook/internal/manager-api\";\nimport { AddonPanel } from \"storybook/internal/components\";\nimport { ADDON_ID, EVENTS, PARAM_KEY } from \"./constants\";\nimport { PanelContent } from \"./components/PanelContent\";\n\ninterface PanelProps {\n  active: boolean;\n}\n\nexport const Panel: React.FC<PanelProps> = (props) => {\n  // https://storybook.js.org/docs/react/addons/addons-api#useaddonstate\n  const [{ code }, setState] = useAddonState(ADDON_ID, {\n    code: null,\n  });\n\n  // https://storybook.js.org/docs/react/addons/addons-api#usechannel\n  useChannel({\n    [EVENTS.CODE_UPDATE]: ({ code }) => {\n      setState((state) => ({ ...state, code }));\n    },\n  });\n\n  const parameters = useParameter(PARAM_KEY, {\n    highlighter: { showLineNumbers: false, wrapLines: true },\n  });\n  const {\n    highlighter: { showLineNumbers = false, wrapLines = true } = {},\n  } = parameters;\n\n  return (\n    <AddonPanel {...props}>\n      <PanelContent\n        code={code}\n        showLineNumbers={showLineNumbers}\n        wrapLines={wrapLines}\n      />\n    </AddonPanel>\n  );\n};\n","import React from \"react\";\nimport { SyntaxHighlighter } from \"storybook/internal/components\"\n\ninterface PanelContentProps {\n  code: string;\n  showLineNumbers?: boolean;\n  wrapLines?: boolean;\n}\n\nexport const PanelContent: React.FC<PanelContentProps> = ({\n  code,\n  showLineNumbers = false,\n  wrapLines = false,\n}) => (\n  <SyntaxHighlighter\n    language={\"html\"}\n    copyable={true}\n    padded={true}\n    showLineNumbers={showLineNumbers}\n    wrapLongLines={wrapLines}\n    format={\"html\"}\n  >\n    {code}\n  </SyntaxHighlighter>\n);\n"]}